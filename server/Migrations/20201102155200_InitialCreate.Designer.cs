// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApi.Helpers;

namespace WebApi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20201102155200_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("WebApi.Controllers.ViewModels.ClientsPlans", b =>
                {
                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<string>("PlanId")
                        .HasColumnType("text");

                    b.HasKey("ClientId", "PlanId");

                    b.HasIndex("PlanId");

                    b.ToTable("ClientsPlans");
                });

            modelBuilder.Entity("WebApi.Controllers.ViewModels.ClientsTrainers", b =>
                {
                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.Property<string>("TrainerId")
                        .HasColumnType("text");

                    b.HasKey("ClientId", "TrainerId");

                    b.HasIndex("TrainerId");

                    b.ToTable("ClientsTrainers");
                });

            modelBuilder.Entity("WebApi.Entities.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = "1",
                            Title = "Amatorskie"
                        },
                        new
                        {
                            CategoryId = "2",
                            Title = "Średnio-Zaawansowane"
                        },
                        new
                        {
                            CategoryId = "3",
                            Title = "Profesjonalistyczne"
                        });
                });

            modelBuilder.Entity("WebApi.Entities.Exercise", b =>
                {
                    b.Property<string>("ExerciseId")
                        .HasColumnType("text");

                    b.Property<string>("CategoryId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<List<byte[]>>("Files")
                        .HasColumnType("bytea[]");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PlanId")
                        .HasColumnType("text");

                    b.Property<int>("Series")
                        .HasColumnType("integer");

                    b.Property<int>("Times")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("ExerciseId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PlanId");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            ExerciseId = "a",
                            CategoryId = "1",
                            Description = "W podciąganiu na drążku podchwytem, sam chwyt nie różni się od tego w innych ćwiczeniach wielostawowych z obciążeniem. Podchwyt to oczywiście ustawienie rąk w supinacji, czyli wewnętrzną częścią dłoni w naszą stronę. Drążek chwytamy jak najmocniej i oplatając go kciukiem.",
                            Name = "Podciąganie nad chwyt",
                            Series = 7,
                            Times = 4,
                            Weight = 0
                        },
                        new
                        {
                            ExerciseId = "b",
                            CategoryId = "1",
                            Description = "Nasze mięśnie czworogłowe dają z siebie wszystko już na samym dole przysiadu, jako że przy siadach high bar ciężar jest mniejszy, kolana mogą wysunąć się trochę bardziej do przodu, bo moment siły potrzebny do wyprostowania kolana jest taki sam, jak przy siadzie low bar z cięższą sztangą.",
                            Name = "Przysiady ze sztangą (high bar)",
                            Series = 7,
                            Times = 4,
                            Weight = 45
                        },
                        new
                        {
                            ExerciseId = "c",
                            CategoryId = "1",
                            Description = "Hip thrust, czyli wypychanie bioder w podporze grzbietem o ławeczkę oraz glute bridge, czyli unoszenie bioder w pozycji leżącej to aktualnie jedne z najskuteczniejszych ćwiczeń na mięśnie pośladkowe!",
                            Name = "Glut bridge jednorożec",
                            Series = 9,
                            Times = 3,
                            Weight = 15
                        },
                        new
                        {
                            ExerciseId = "d",
                            CategoryId = "1",
                            Description = "Utrzymuj prawidłową pozycję wyjściową, napinaj mocno mięśnie nóg, pośladki oraz brzuch, utrzymaj pozycję przez wyznaczony czas, wykonaj izometryczny skurcz mięśni oraz oddychaj głęboko.",
                            Name = "Deska bokiem",
                            Series = 27,
                            Times = 2,
                            Weight = 0
                        },
                        new
                        {
                            ExerciseId = "e",
                            CategoryId = "1",
                            Description = "Dziękuję bardzo za odpowiedź! czy mogę wykonywać wznosy bokiem hantlami bo chce zacząć chodzić na siłownie,mialem przerwę i chce znowu zacząć chodzić. Czy jakoś te wznosy mogą przyhamowac wzrost czy coś i czy mogę je wykonywać?",
                            Name = "Spiętki",
                            Series = 7,
                            Times = 4,
                            Weight = 0
                        },
                        new
                        {
                            ExerciseId = "f",
                            CategoryId = "2",
                            Description = "Spacer farmera (ang. Farmer's Walk) – konkurencja zawodów siłaczy. Zadaniem zawodnika jest podniesienie z podłoża dwóch ciężarów (tzw. „walizek”) – po jednym w każdej z dłoni – i pokonaniu z obydwoma dystansu.",
                            Name = "Spacer farmera",
                            Series = 0,
                            Times = 0,
                            Weight = 25
                        },
                        new
                        {
                            ExerciseId = "g",
                            CategoryId = "2",
                            Description = "",
                            Name = "Martwy ciąg sumo",
                            Series = 0,
                            Times = 0,
                            Weight = 35
                        },
                        new
                        {
                            ExerciseId = "h",
                            CategoryId = "2",
                            Description = "Najprościej można powiedzieć, że martwy ciąg klasyczny wykonujemy rozstawiając nogi na szerokość bioder, a martwy ciąg sumo robimy na nogach rozstawionych szeroko, pilnując, aby ręce znajdowały się wewnątrz ich nawisu.",
                            Name = "Martwy Ciąg",
                            Series = 0,
                            Times = 0,
                            Weight = 43
                        },
                        new
                        {
                            ExerciseId = "i",
                            CategoryId = "2",
                            Description = "W pozycji górnej ćwiczenia napnij łydki.Powoli opuść się z powrotem do pozycji wyjściowej, abyś czuł pełne rozciąganie w łydkach.Nie uginaj kolan, by wytworzyć pęd podczas unoszenia się na palcach stóp.",
                            Name = "Uginanie na łydki stojąc",
                            Series = 27,
                            Times = 2,
                            Weight = 35
                        },
                        new
                        {
                            ExerciseId = "j",
                            CategoryId = "3",
                            Description = "1) Połóż się na ławce płaskiej. 2) Stopy ustaw w lekkim rozkroku i mocno zaprzyj o podłoże. 3) Chwyć sztangę nachwytem (palce wskazują przód, kciuki skierowane do środka) na taką szerokość, aby w połowie wykonywania ruchu kąt między ramieniem a przedramieniem wynosił 90 stopni.",
                            Name = "Wyciskanie na płaskiej",
                            Series = 2,
                            Times = 5,
                            Weight = 60
                        },
                        new
                        {
                            ExerciseId = "k",
                            CategoryId = "3",
                            Description = "Wznosy bokiem, wznosy sztangielek bokiem, lub odwodzenie ramion w bok ze sztangielkami (ang. Shoulder Fly, dumbbell deltoid raise) - ćwiczenie fizyczne polegające na podnoszeniu ramionami ciężaru (najczęściej hantli) stosowane podczas treningu kulturystycznego.",
                            Name = "Wznosy bokiem",
                            Series = 3,
                            Times = 5,
                            Weight = 25
                        },
                        new
                        {
                            ExerciseId = "l",
                            CategoryId = "3",
                            Description = "Najprościej można powiedzieć, że martwy ciąg klasyczny wykonujemy rozstawiając nogi na szerokość bioder, a martwy ciąg sumo robimy na nogach rozstawionych szeroko, pilnując, aby ręce znajdowały się wewnątrz ich nawisu.",
                            Name = "Martwy ciąg sumo",
                            Series = 0,
                            Times = 0,
                            Weight = 35
                        },
                        new
                        {
                            ExerciseId = "m",
                            CategoryId = "3",
                            Description = "1) Zajmij miejsce na maszynie, dostosowując ją do swojego wzrostu.Kończyny dolne wyprostowane, wałek maszyny znajduje się kilka centymetrów poniżej łydek.Chwyć za uchwyty znajdujące się po bokach siedziska.",
                            Name = "Uginanie na dwójki na maszynie",
                            Series = 0,
                            Times = 0,
                            Weight = 43
                        },
                        new
                        {
                            ExerciseId = "n",
                            CategoryId = "3",
                            Description = " Z pozycji, w której stopa jest mocno zadarta do góry, pięta skrajnie obniżona, palce wskazują sufit, a łydka jest mocno rozciągnięta, odpychaj się od podwyższenia poprzez mocne wspięcie na palce i napięcie łydek.",
                            Name = "Uginanie na łydki stojąc",
                            Series = 27,
                            Times = 2,
                            Weight = 35
                        },
                        new
                        {
                            ExerciseId = "o",
                            CategoryId = "3",
                            Description = "musculus triceps brachii) - mięsień zajmujący całą powierzchnię tylną ramienia i należący do tylnej grupy mięśni ramienia, rozpięty między łopatką i kością",
                            Name = "Triceps",
                            Series = 5,
                            Times = 1,
                            Weight = 7
                        });
                });

            modelBuilder.Entity("WebApi.Entities.Organization", b =>
                {
                    b.Property<string>("OrganizationId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("OrganizationId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            OrganizationId = "O1",
                            Name = "Apple"
                        },
                        new
                        {
                            OrganizationId = "O2",
                            Name = "Google"
                        },
                        new
                        {
                            OrganizationId = "O3",
                            Name = "Microsoft"
                        });
                });

            modelBuilder.Entity("WebApi.Entities.Plan", b =>
                {
                    b.Property<string>("PlanId")
                        .HasColumnType("text");

                    b.Property<string>("ClientUserId")
                        .HasColumnType("text");

                    b.Property<string>("CreatorId")
                        .HasColumnType("text");

                    b.Property<string>("CreatorName")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("TrainerUserId")
                        .HasColumnType("text");

                    b.HasKey("PlanId");

                    b.HasIndex("ClientUserId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TrainerUserId");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("WebApi.Entities.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("bytea");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea");

                    b.Property<DateTime>("PasswordReset")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("bytea");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("integer");

                    b.Property<string>("ResetToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("WebApi.Entities.Admin", b =>
                {
                    b.HasBaseType("WebApi.Entities.User");

                    b.Property<string>("AdminId")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            UserId = "a1",
                            Email = "tgianelli0@eventbrite.com",
                            FirstName = "admin",
                            LastName = "lol",
                            OrganizationId = "O1",
                            Password = "admin",
                            PasswordReset = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = 555555555,
                            Role = "Admin",
                            AdminId = "aa05a67b-a5df-4314-bdf6-63dfb1636906"
                        });
                });

            modelBuilder.Entity("WebApi.Entities.Client", b =>
                {
                    b.HasBaseType("WebApi.Entities.User");

                    b.Property<string>("ClientId")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            UserId = "u1",
                            Email = "tgianelli0@eventbrite.com",
                            FirstName = "Teodoor",
                            LastName = "Gianelli",
                            OrganizationId = "O1",
                            Password = "Teodor",
                            PasswordReset = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = 555555555,
                            Role = "User",
                            Token = "t-user",
                            ClientId = "u1"
                        },
                        new
                        {
                            UserId = "u2",
                            Email = "jcasson3@prlog.org",
                            FirstName = "Jillana",
                            LastName = "Casson",
                            OrganizationId = "O1",
                            Password = "Jillana",
                            PasswordReset = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = 666666666,
                            Role = "User",
                            Token = "t-trainer",
                            ClientId = "u2"
                        },
                        new
                        {
                            UserId = "u3",
                            Email = "Teloinic@gmail.com",
                            FirstName = "Camille",
                            LastName = "Teloinic",
                            OrganizationId = "O1",
                            Password = "Teodor",
                            PasswordReset = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = 555555555,
                            Role = "User",
                            Token = "t-user",
                            ClientId = "u3"
                        },
                        new
                        {
                            UserId = "u4",
                            Email = "kburgne2@hp.com",
                            FirstName = "Kiel",
                            LastName = "Burgne",
                            OrganizationId = "O1",
                            Password = "Kiel",
                            PasswordReset = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = 777777777,
                            Role = "User",
                            Token = "t-trainer",
                            ClientId = "u4"
                        },
                        new
                        {
                            UserId = "u5",
                            Email = "awharinu@tmall.com",
                            FirstName = "Augustus",
                            LastName = "Wharin",
                            OrganizationId = "O1",
                            Password = "Augustus",
                            PasswordReset = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = 555555555,
                            Role = "User",
                            Token = "t-user",
                            ClientId = "u5"
                        },
                        new
                        {
                            UserId = "u6",
                            Email = "bcaullieres@auda.org.au",
                            FirstName = "Bondy",
                            LastName = "Caulliere",
                            OrganizationId = "O1",
                            Password = "Bondy",
                            PasswordReset = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = 666666666,
                            Role = "User",
                            Token = "t-trainer",
                            ClientId = "u6"
                        },
                        new
                        {
                            UserId = "o2u1",
                            Email = "jmeachem0@eventbrite.com",
                            FirstName = "Jacklyn",
                            LastName = "Meachem",
                            OrganizationId = "O2",
                            Password = "Jacklyn",
                            PasswordReset = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = 555555555,
                            Role = "User",
                            Token = "t-user",
                            ClientId = "o2u1"
                        },
                        new
                        {
                            UserId = "o2u2",
                            Email = "gkryska1@about.com",
                            FirstName = "Georgie",
                            LastName = "Kryska",
                            OrganizationId = "O2",
                            Password = "Jillana",
                            PasswordReset = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = 666666666,
                            Role = "User",
                            Token = "t-trainer",
                            ClientId = "o2u2"
                        },
                        new
                        {
                            UserId = "o2u3",
                            Email = "kcridge2@xrea.com",
                            FirstName = "Kiah",
                            LastName = "Cridge",
                            OrganizationId = "O2",
                            Password = "Teodor",
                            PasswordReset = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = 555555555,
                            Role = "User",
                            Token = "t-user",
                            ClientId = "o2u3"
                        },
                        new
                        {
                            UserId = "o2u4",
                            Email = "jsarrell3@whitehouse.gov",
                            FirstName = "Jarret",
                            LastName = "Sarrell",
                            OrganizationId = "O2",
                            Password = "Kiel",
                            PasswordReset = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = 777777777,
                            Role = "User",
                            Token = "t-trainer",
                            ClientId = "o2u4"
                        },
                        new
                        {
                            UserId = "o2u5",
                            Email = "flydiate5@biblegateway.com",
                            FirstName = "Felice",
                            LastName = "Lydiate",
                            OrganizationId = "O2",
                            Password = "Augustus",
                            PasswordReset = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = 555555555,
                            Role = "User",
                            Token = "t-user",
                            ClientId = "o2u5"
                        },
                        new
                        {
                            UserId = "o2u6",
                            Email = "gpedlingham6@ow.ly",
                            FirstName = "Gerald",
                            LastName = "Pedlingham",
                            OrganizationId = "O2",
                            Password = "Bondy",
                            PasswordReset = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = 666666666,
                            Role = "User",
                            Token = "t-trainer",
                            ClientId = "o2u6"
                        },
                        new
                        {
                            UserId = "o3u1",
                            Email = "thilldrupe@berkeley.edu",
                            FirstName = "Titus",
                            LastName = "Hilldrup",
                            OrganizationId = "O3",
                            Password = "Titus",
                            PasswordReset = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = 555555555,
                            Role = "User",
                            Token = "t-user",
                            ClientId = "o3u1"
                        },
                        new
                        {
                            UserId = "o3u2",
                            Email = "mtamesf@netvibes.com",
                            FirstName = "Maribel",
                            LastName = "Tames",
                            OrganizationId = "O3",
                            Password = "Maribel",
                            PasswordReset = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = 666666666,
                            Role = "User",
                            Token = "t-trainer",
                            ClientId = "o3u2"
                        },
                        new
                        {
                            UserId = "o3u3",
                            Email = "tknowldenh@wsj.com",
                            FirstName = "Trumann",
                            LastName = "Knowlden",
                            OrganizationId = "O3",
                            Password = "Trumann",
                            PasswordReset = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = 555555555,
                            Role = "User",
                            Token = "t-user",
                            ClientId = "o3u3"
                        },
                        new
                        {
                            UserId = "o3u4",
                            Email = "jsarrell3@whitehouse.gov",
                            FirstName = "Jarret",
                            LastName = "Sarrell",
                            OrganizationId = "O3",
                            Password = "Jarret",
                            PasswordReset = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = 777777777,
                            Role = "User",
                            Token = "t-trainer",
                            ClientId = "o2u4"
                        },
                        new
                        {
                            UserId = "o3u5",
                            Email = "gcamidgej@umich.edu",
                            FirstName = "Godfry",
                            LastName = "Camidge",
                            OrganizationId = "O3",
                            Password = "Godfry",
                            PasswordReset = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = 555555555,
                            Role = "User",
                            Token = "t-user",
                            ClientId = "o3u5"
                        },
                        new
                        {
                            UserId = "o3u6",
                            Email = "mcorbyl@comsenz.com",
                            FirstName = "Maison",
                            LastName = "Corby",
                            OrganizationId = "O3",
                            Password = "Bondy",
                            PasswordReset = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = 666666666,
                            Role = "User",
                            Token = "t-trainer",
                            ClientId = "o3u6"
                        });
                });

            modelBuilder.Entity("WebApi.Entities.Owner", b =>
                {
                    b.HasBaseType("WebApi.Entities.User");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Owner");

                    b.HasData(
                        new
                        {
                            UserId = "owner1",
                            Email = "owner1@eventbrite.com",
                            FirstName = "Owner1",
                            LastName = "LastName",
                            OrganizationId = "O1",
                            Password = "Owner1",
                            PasswordReset = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = 555555555,
                            Role = "Owner",
                            OwnerId = "69890b28-415d-4af6-8348-2f1d9f2757f5"
                        },
                        new
                        {
                            UserId = "owner2",
                            Email = "owner2@eventbrite.com",
                            FirstName = "Owner2",
                            LastName = "lol",
                            OrganizationId = "O2",
                            Password = "Owner2",
                            PasswordReset = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = 555555555,
                            Role = "Owner",
                            OwnerId = "28cb3610-652a-4557-960c-3282c89322fb"
                        },
                        new
                        {
                            UserId = "owner3",
                            Email = "owner3@eventbrite.com",
                            FirstName = "Owner3",
                            LastName = "lol",
                            OrganizationId = "O3",
                            Password = "Owner3",
                            PasswordReset = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = 555555555,
                            Role = "Owner",
                            OwnerId = "5d58b65e-cdc5-467e-ad18-0838f46972f0"
                        });
                });

            modelBuilder.Entity("WebApi.Entities.Trainer", b =>
                {
                    b.HasBaseType("WebApi.Entities.User");

                    b.Property<string>("TrainerId")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Trainer");

                    b.HasData(
                        new
                        {
                            UserId = "t1",
                            Email = "vmaccathay17@house.gov",
                            FirstName = "Valentia",
                            LastName = "MacCathay",
                            OrganizationId = "O1",
                            Password = "Valentia",
                            PasswordReset = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = 777777777,
                            Role = "Trainer",
                            Token = "t-organization",
                            TrainerId = "t1"
                        },
                        new
                        {
                            UserId = "t2",
                            Email = "efearey1f@mlb.com",
                            FirstName = "Eadith",
                            LastName = "Fearey",
                            OrganizationId = "O1",
                            Password = "Eadith",
                            PasswordReset = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = 777777777,
                            Role = "Trainer",
                            Token = "t-organization",
                            TrainerId = "t2"
                        },
                        new
                        {
                            UserId = "o2t1",
                            Email = "tbullerwell1n@sitemeter.com",
                            FirstName = "Talia",
                            LastName = "Bullerwell",
                            OrganizationId = "O2",
                            Password = "Talia",
                            PasswordReset = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = 777777777,
                            Role = "Trainer",
                            Token = "t-organization",
                            TrainerId = "o2t1"
                        },
                        new
                        {
                            UserId = "o2t2",
                            Email = "mbabb1x@java.com",
                            FirstName = "Malachi",
                            LastName = "Babb",
                            OrganizationId = "O2",
                            Password = "Malachi",
                            PasswordReset = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = 777777777,
                            Role = "Trainer",
                            Token = "t-organization",
                            TrainerId = "o2t2"
                        },
                        new
                        {
                            UserId = "o3t1",
                            Email = "bdunstan8@dell.com",
                            FirstName = "Benedikta",
                            LastName = "Dunstan",
                            OrganizationId = "O3",
                            Password = "Valentia",
                            PasswordReset = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = 777777777,
                            Role = "Trainer",
                            Token = "t-organization",
                            TrainerId = "o3t1"
                        },
                        new
                        {
                            UserId = "o3t2",
                            Email = "fhobdena@census.gov",
                            FirstName = "Freddie",
                            LastName = "Hobden",
                            OrganizationId = "O3",
                            Password = "Eadith",
                            PasswordReset = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = 777777777,
                            Role = "Trainer",
                            Token = "t-organization",
                            TrainerId = "o3t2"
                        });
                });

            modelBuilder.Entity("WebApi.Controllers.ViewModels.ClientsPlans", b =>
                {
                    b.HasOne("WebApi.Entities.Client", "Client")
                        .WithMany("ClientsPlans")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Plan", "Plan")
                        .WithMany("ClientsPlans")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Controllers.ViewModels.ClientsTrainers", b =>
                {
                    b.HasOne("WebApi.Entities.Client", "Client")
                        .WithMany("ClientsTrainers")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Trainer", "Trainer")
                        .WithMany("ClientsTrainers")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.Exercise", b =>
                {
                    b.HasOne("WebApi.Entities.Category", null)
                        .WithMany("Exercises")
                        .HasForeignKey("CategoryId");

                    b.HasOne("WebApi.Entities.Plan", null)
                        .WithMany("Exercises")
                        .HasForeignKey("PlanId");
                });

            modelBuilder.Entity("WebApi.Entities.Plan", b =>
                {
                    b.HasOne("WebApi.Entities.Client", null)
                        .WithMany("Plans")
                        .HasForeignKey("ClientUserId");

                    b.HasOne("WebApi.Entities.Organization", null)
                        .WithMany("Plans")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("WebApi.Entities.Trainer", null)
                        .WithMany("Plans")
                        .HasForeignKey("TrainerUserId");
                });

            modelBuilder.Entity("WebApi.Entities.User", b =>
                {
                    b.HasOne("WebApi.Entities.Organization", null)
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId");
                });
#pragma warning restore 612, 618
        }
    }
}
